import torch
import uuid
import itertools
from util.image_pool import ImagePool
from .base_model import BaseModel
from . import networks
from models.cycle_gan_model import CycleGANModel
import os
import numpy as np
import copy
import math


class CycleGANModel(BaseModel):

    def __init__(self, opt):
        BaseModel.__init__(self, opt)
        self.generators = [] # TODO: define generator
        self.netD_A  = None # TODO: define discriminator
        self.netD_B = None
        self.mutations = []
        # TODO:
        # parent optimizer for generator
        self.optimizer_G = torch.optim.Adam(itertools.chain(self.netG_A.parameters(), self.netG_B.parameters()),
                                            lr=opt.lr, betas=(opt.beta1, 0.999))
        self.optimizer_D = torch.optim.Adam(itertools.chain(self.netD_A.parameters(), self.netD_B.parameters()),
                                            lr=opt.lr, betas=(opt.beta1, 0.999))
        self.opt = opt
        self.criterionGAN = networks.GANLoss(opt.gan_mode).to(self.device)  # define GAN loss.
        self.criterionCycle = torch.nn.L1Loss()
        self.criterionIdt = torch.nn.L1Loss()
        self.gamma = opt.gamma # used for fitness score

    def add_mutation_func(self, mutation_func):
        self.mutations.append(mutation_func)

    def forward(self):
        # Runs a forward pass for each generator pair

        self.fake_A_list, self.fake_B_list = [], []
        self.rec_A_list, self.rec_B_list = [], []

        for i in range(len(self.generators)):
            gen_pair = self.generators[i]
            f_b = gen_pair.netG_A(self.real_A)    # G_A(A)
            r_a = gen_pair.netG_B(f_b)            # G_B(G_A(A))
            f_a = gen_pair.netG_B(self.real_B)    # G_B(B)
            r_b = gen_pair.netG_A(f_a)            # G_A(G_B(B))

            self.fake_B_list.append(f_b)
            self.rec_A_list.append(r_a)
            self.fake_A_list.append(f_a)
            self.rec_B_list.append(r_b)

    def backward_D_basic(self, netD, real, fake):
        """Calculate GAN loss for the discriminator

        Parameters:
            netD (network)      -- the discriminator D
            real (tensor array) -- real images
            fake list((tensor array)) -- list of images generated by generators

        Return the discriminator loss.
        We also call loss_D.backward() to calculate the gradients.

        loss_D = avg(avg(loss_D_real, loss_D_fake[0]), avg(loss_D_real, loss_D_fake[1])..
                ... avg(loss_D_real, loss_D_fake[N-1]))
        """
        # Real
        pred_real = netD(real)
        loss_D_real = self.criterionGAN(pred_real, True)

        loss_D = 0

        for i in range(len(fake)):

            # Fake

            pred_fake = netD(fake[i].detach())
            loss_D_fake = self.criterionGAN(pred_fake, False)

            loss_D += (loss_D_real + loss_D_fake) * 0.5

        loss_D = loss_D / len(fake)
        loss_D.backward()
        return loss_D

    def backward_D_A(self):
        """Calculate GAN loss for discriminator D_A"""
        fake_B_queries = [self.fake_B_pool.query(fb) for fb in self.fake_B_list]
        self.loss_D_A = self.backward_D_basic(self.netD_A, self.real_B, fake_B_queries)

    def backward_D_B(self):
        """Calculate GAN loss for discriminator D_B"""
        fake_A_queries = [self.fake_A_pool.query(fa) for fa in self.fake_A_list]
        self.loss_D_B = self.backward_D_basic(self.netD_B, self.real_A, fake_A_queries)

    def backward_G(self):
        """
        Calculate the loss function for each generator pair
        Calculate the loss for generators G_A and G_B
        """

        lambda_idt = self.opt.lambda_identity
        lambda_A = self.opt.lambda_A
        lambda_B = self.opt.lambda_B
        fitness_scores = []
        optimizer_list = [] # keep optimizer of best child
        #losses without the mutations
        losses = np.empty(len(self.generators)*len(self.mutations))
        #loop over parent generators
        for i in range(len(self.generators)):
            gen_pair = self.generators[i] # parent
            # GAN loss D_A(G_A(A))
            loss_G_A = self.criterionGAN(self.netD_A(self.fake_B_list[i]), True)
            # GAN loss D_B(G_B(B))
            loss_G_B = self.criterionGAN(self.netD_B(self.fake_A_list[i]), True)
            # Forward cycle loss || G_B(G_A(A)) - A||
            loss_cycle_A = self.criterionCycle(self.rec_A_list[i], self.real_A) * lambda_A
            # Backward cycle loss || G_A(G_B(B)) - B||
            loss_cycle_B = self.criterionCycle(self.rec_B_list[i], self.real_B) * lambda_B

            for mut_func in self.mutations:
                child_generator = copy.deepcopy(gen_pair)
                # Identity loss
                if lambda_idt > 0:
                    # G_A should be identity if real_B is fed: ||G_A(B) - B||
                    idt_A = child_generator.netG_A(self.real_B)
                    loss_idt_A = self.criterionIdt(idt_A, self.real_B) * lambda_B * lambda_idt
                    # G_B should be identity if real_A is fed: ||G_B(A) - A||
                    idt_B = child_generator.netG_B(self.real_A)
                    loss_idt_B = self.criterionIdt(idt_B, self.real_A) * lambda_A * lambda_idt
                else:
                    loss_idt_A = 0
                    loss_idt_B = 0



                # combined loss and calculate gradients
                loss_G = loss_G_A + loss_G_B + loss_cycle_A + loss_cycle_B + loss_idt_A + loss_idt_B

                mut_cost = loss_G + mut_func(self.netD_A(self.fake_B_list[i])) + mut_func(self.netD_B(self.fake_A_list[i]))
                # self.optimizer_G.__setstate__({
                #     'param_groups': child_generator.get_parameters()
                # })
                mut_cost.backward()
                optimizer = self.get_copy_optimizer(child_generator)
                optimizer.step()
                optimizer_list.append(optimizer)


        #TODO: fitness score



    def get_copy_optimizer(self, child_generator):
        optimizer = torch.optim.Adam(child_generator.parameters(), lr=self.opt.lr)
        new_state = self.optimizer_G.state_dict()
        new_state['param_groups'] = optimizer.state_dict()['param_groups']
        optimizer.load_state_dict(new_state)
        return optimizer

    def fitness_score(self, generator, discriminator, img_real, pred_real):
        """
        Evalute the fitness
        https://github.com/WANG-Chaoyue/EvolutionaryGAN/blob/master/bedroom/train_bedroom_64.py

        fd should be the sum of the square of gradients
        fake_disc_pred = prediction of the discriminator on fake data
        """
        discriminator.zero_grad()
        img_fake = generator(img_real)
        pred_fake = discriminator(img_fake)
        fq = pred_fake.mean() # quality fitness

        loss_D_real = self.criterionGAN(pred_real, True)
        loss_D_fake = self.criterionGAN(pred_fake, False)

        loss_D = (loss_D_real + loss_D_fake) * 0.5
        loss_D.backward()
        # get gradient values
        grad_val = 0
        for p in discriminator.parameters():
            grad_val += torch.sum(p.grad**2)
        fd = math.log(grad_val) # diversity fitness
        return fq  + fd



# TODO: check if these mutation costs are correct
# Assuming p_z is uniform distribution
def minimax_mutation_cost(fake_disc_pred):
    """
    Assuming p_z is uniform distribution
    :param fake_disc_pred: tensor of shape (N). Results of D(G(x))
    :return: 1/2 * E[log(1- fake_disc_pred)]
    """
    log_dist = torch.log(torch.ones(fake_disc_pred.shape[0]) - fake_disc_pred)
    return -0.5 * log_dist.mean()

def heuristic_mutation_cost(fake_disc_pred):
    """
    Assuming p_z is uniform distribution
    :param fake_disc_pred: tensor of shape (N). Results of D(G(x))
    :return: -1/2 * E[log(fake_disc_pred)]
    """
    log_dist = torch.log(fake_disc_pred)
    return -0.5 * log_dist.mean()

def least_square_mutation_cost(fake_disc_pred):
    """
    Assuming p_z is uniform distribution
    :param fake_disc_pred: tensor of shape (N). Results of D(G(x))
    :return: E[(fake_disc_pred - 1)^2]
    """

    sq_dist = (fake_disc_pred - torch.ones(fake_disc_pred.shape[0]))**2
    return sq_dist.mean()

class GeneratorPair:

    def __init__(self, base_dir='./cache'):
        self.netG_A = None # TODO fill these
        self.netG_B = None
        self.uuid = str(uuid.uuid4())
        self.save_dir = os.path.join(base_dir, self.uuid)
        while os.path.exists(self.save_dir):
            self.uuid = str(uuid.uuid4())
            self.save_dir = os.path.join(base_dir, self.uuid)
            # make sure there isn't a duplicate
        try:
            os.makedirs(self.save_dir)
        except:
            pass

    def save_to_disk(self):
        torch.save(self.netG_A, os.path.join(self.save_dir, 'netG_A.model'))
        torch.save(self.netG_B, os.path.join(self.save_dir, 'netG_B.model'))
        # remove network from memory
        del self.netG_A
        del self.netG_B
        self.netG_A = None
        self.netG_B = None

    def load_from_disk(self):
        self.netG_A = torch.load(os.path.join(self.save_dir, 'netG_A.model'))
        self.netG_B = torch.load(os.path.join(self.save_dir, 'netG_B.model'))

    def get_parameters(self):
        # TODO: get parameters for both generators
        pass

if __name__ == '__main__':
    pass
