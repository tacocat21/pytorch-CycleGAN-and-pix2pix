import torch
import uuid
import itertools
from util.image_pool import ImagePool
from .base_model import BaseModel
from . import networks
from models.cycle_gan_model import CycleGANModel
import os

class CycleGANModel(BaseModel):

    def __init__(self, opt):
        BaseModel.__init__(self, opt)
        self.generators = []
        self.netD_A  = None
        self.netD_B = None

    def forward(self):
        # Runs a forward pass for each generator pair

        self.fake_A_list, self.fake_B_list = [], []
        self.rec_A_list, self.rec_B_list = [], []

        for i in range(len(self.generators)):
            gen_pair = self.generators[i]
            f_b = gen_pair.netG_A(self.real_A)    # G_A(A)
            r_a = gen_pair.netG_B(f_b)            # G_B(G_A(A))
            f_a = gen_pair.netG_B(self.real_B)    # G_B(B)
            r_b = gen_pair.netG_A(f_a)            # G_A(G_B(B))

            self.fake_B_list.append(f_b)
            self.rec_A_list.append(r_a)
            self.fake_A_list.append(f_a)
            self.rec_B_list.append(r_b)

    def backward_D_basic(self, netD, real, fake):
        """Calculate GAN loss for the discriminator

        Parameters:
            netD (network)      -- the discriminator D
            real (tensor array) -- real images
            fake list((tensor array)) -- list of images generated by generators

        Return the discriminator loss.
        We also call loss_D.backward() to calculate the gradients.

        loss_D = avg(avg(loss_D_real, loss_D_fake[0]), avg(loss_D_real, loss_D_fake[1])..
                ... avg(loss_D_real, loss_D_fake[N-1]))
        """
        # Real
        pred_real = netD(real)
        loss_D_real = self.criterionGAN(pred_real, True)

        loss_D = 0

        for i in range(len(fake)):

            # Fake
            pred_fake = netD(fake[i].detach())
            loss_D_fake = self.criterionGAN(pred_fake, False)

            loss_D += (loss_D_real + loss_D_fake) * 0.5

        loss_D = loss_D / len(fake)
        loss_D.backward()
        return loss_D

    def backward_D_A(self):
        """Calculate GAN loss for discriminator D_A"""
        fake_B_queries = [self.fake_B_pool.query(fb) for fb in self.fake_B_list]
        self.loss_D_A = self.backward_D_basic(self.netD_A, self.real_B, fake_B_queries)

    def backward_D_B(self):
        """Calculate GAN loss for discriminator D_B"""
        fake_A_queries = [self.fake_A_pool.query(fa) for fa in self.fake_A_list]
        self.loss_D_B = self.backward_D_basic(self.netD_B, self.real_A, fake_A_queries)

    def backward_G(self, real_A, real_B):
        pass


# TODO: check if these mutation costs are correct
# Assuming p_z is uniform distribution
def minimax_mutation_cost(fake_disc_pred):
    """
    Assuming p_z is uniform distribution
    :param fake_disc_pred: tensor of shape (N). Results of D(G(x))
    :return: 1/2 * E[log(1- fake_disc_pred)]
    """
    log_dist = torch.log(torch.ones(fake_disc_pred.shape[0]) - fake_disc_pred)
    return -0.5 * log_dist.mean()

def heuristic_mutation_cost(fake_disc_pred):
    """
    Assuming p_z is uniform distribution
    :param fake_disc_pred: tensor of shape (N). Results of D(G(x))
    :return: -1/2 * E[log(fake_disc_pred)]
    """
    log_dist = torch.log(fake_disc_pred)
    return -0.5 * log_dist.mean()

def least_square_mutation_cost(fake_disc_pred):
    """
    Assuming p_z is uniform distribution
    :param fake_disc_pred: tensor of shape (N). Results of D(G(x))
    :return: E[(fake_disc_pred - 1)^2]
    """

    sq_dist = (fake_disc_pred - torch.ones(fake_disc_pred.shape[0]))**2
    return sq_dist.mean()

class GeneratorPair:

    def __init__(self, base_dir='./cache'):
        self.netG_A = None # TODO fill these
        self.netG_B = None
        self.uuid = str(uuid.uuid4())
        self.save_dir = os.path.join(base_dir, self.uuid)
        while os.path.exists(self.save_dir):
            self.uuid = str(uuid.uuid4())
            self.save_dir = os.path.join(base_dir, self.uuid)
            # make sure there isn't a duplicate
        try:
            os.makedirs(self.save_dir)
        except:
            pass

    def save_to_disk(self):
        torch.save(self.netG_A, os.path.join(self.save_dir, 'netG_A.model'))
        torch.save(self.netG_B, os.path.join(self.save_dir, 'netG_B.model'))
        # remove network from memory
        del self.netG_A
        del self.netG_B
        self.netG_A = None
        self.netG_B = None

    def load_from_disk(self):
        self.netG_A = torch.load(os.path.join(self.save_dir, 'netG_A.model'))
        self.netG_B = torch.load(os.path.join(self.save_dir, 'netG_B.model'))

        

if __name__ == '__main__':
    pass